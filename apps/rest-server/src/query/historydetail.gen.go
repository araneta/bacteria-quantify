// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"bacteriapp/model"
)

func newHistoryDetail(db *gorm.DB, opts ...gen.DOOption) historyDetail {
	_historyDetail := historyDetail{}

	_historyDetail.historyDetailDo.UseDB(db, opts...)
	_historyDetail.historyDetailDo.UseModel(&model.HistoryDetail{})

	tableName := _historyDetail.historyDetailDo.TableName()
	_historyDetail.ALL = field.NewAsterisk(tableName)
	_historyDetail.ID = field.NewInt32(tableName, "ID")
	_historyDetail.HistoryID = field.NewInt32(tableName, "HistoryID")
	_historyDetail.Species = field.NewString(tableName, "species")
	_historyDetail.TotalColony = field.NewInt32(tableName, "totalColony")
	_historyDetail.CreatedAt = field.NewTime(tableName, "createdAt")
	_historyDetail.UpdatedAt = field.NewTime(tableName, "updatedAt")
	_historyDetail.DeletedAt = field.NewTime(tableName, "deletedAt")

	_historyDetail.fillFieldMap()

	return _historyDetail
}

type historyDetail struct {
	historyDetailDo

	ALL         field.Asterisk
	ID          field.Int32  // NGS generated
	HistoryID   field.Int32  // NGS generated
	Species     field.String // NGS generated
	TotalColony field.Int32  // NGS generated
	CreatedAt   field.Time   // NGS generated
	UpdatedAt   field.Time   // NGS generated
	DeletedAt   field.Time   // NGS generated

	fieldMap map[string]field.Expr
}

func (h historyDetail) Table(newTableName string) *historyDetail {
	h.historyDetailDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h historyDetail) As(alias string) *historyDetail {
	h.historyDetailDo.DO = *(h.historyDetailDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *historyDetail) updateTableName(table string) *historyDetail {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt32(table, "ID")
	h.HistoryID = field.NewInt32(table, "HistoryID")
	h.Species = field.NewString(table, "species")
	h.TotalColony = field.NewInt32(table, "totalColony")
	h.CreatedAt = field.NewTime(table, "createdAt")
	h.UpdatedAt = field.NewTime(table, "updatedAt")
	h.DeletedAt = field.NewTime(table, "deletedAt")

	h.fillFieldMap()

	return h
}

func (h *historyDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *historyDetail) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 7)
	h.fieldMap["ID"] = h.ID
	h.fieldMap["HistoryID"] = h.HistoryID
	h.fieldMap["species"] = h.Species
	h.fieldMap["totalColony"] = h.TotalColony
	h.fieldMap["createdAt"] = h.CreatedAt
	h.fieldMap["updatedAt"] = h.UpdatedAt
	h.fieldMap["deletedAt"] = h.DeletedAt
}

func (h historyDetail) clone(db *gorm.DB) historyDetail {
	h.historyDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h historyDetail) replaceDB(db *gorm.DB) historyDetail {
	h.historyDetailDo.ReplaceDB(db)
	return h
}

type historyDetailDo struct{ gen.DO }

type IHistoryDetailDo interface {
	gen.SubQuery
	Debug() IHistoryDetailDo
	WithContext(ctx context.Context) IHistoryDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHistoryDetailDo
	WriteDB() IHistoryDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHistoryDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHistoryDetailDo
	Not(conds ...gen.Condition) IHistoryDetailDo
	Or(conds ...gen.Condition) IHistoryDetailDo
	Select(conds ...field.Expr) IHistoryDetailDo
	Where(conds ...gen.Condition) IHistoryDetailDo
	Order(conds ...field.Expr) IHistoryDetailDo
	Distinct(cols ...field.Expr) IHistoryDetailDo
	Omit(cols ...field.Expr) IHistoryDetailDo
	Join(table schema.Tabler, on ...field.Expr) IHistoryDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHistoryDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHistoryDetailDo
	Group(cols ...field.Expr) IHistoryDetailDo
	Having(conds ...gen.Condition) IHistoryDetailDo
	Limit(limit int) IHistoryDetailDo
	Offset(offset int) IHistoryDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHistoryDetailDo
	Unscoped() IHistoryDetailDo
	Create(values ...*model.HistoryDetail) error
	CreateInBatches(values []*model.HistoryDetail, batchSize int) error
	Save(values ...*model.HistoryDetail) error
	First() (*model.HistoryDetail, error)
	Take() (*model.HistoryDetail, error)
	Last() (*model.HistoryDetail, error)
	Find() ([]*model.HistoryDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HistoryDetail, err error)
	FindInBatches(result *[]*model.HistoryDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.HistoryDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHistoryDetailDo
	Assign(attrs ...field.AssignExpr) IHistoryDetailDo
	Joins(fields ...field.RelationField) IHistoryDetailDo
	Preload(fields ...field.RelationField) IHistoryDetailDo
	FirstOrInit() (*model.HistoryDetail, error)
	FirstOrCreate() (*model.HistoryDetail, error)
	FindByPage(offset int, limit int) (result []*model.HistoryDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHistoryDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h historyDetailDo) Debug() IHistoryDetailDo {
	return h.withDO(h.DO.Debug())
}

func (h historyDetailDo) WithContext(ctx context.Context) IHistoryDetailDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h historyDetailDo) ReadDB() IHistoryDetailDo {
	return h.Clauses(dbresolver.Read)
}

func (h historyDetailDo) WriteDB() IHistoryDetailDo {
	return h.Clauses(dbresolver.Write)
}

func (h historyDetailDo) Session(config *gorm.Session) IHistoryDetailDo {
	return h.withDO(h.DO.Session(config))
}

func (h historyDetailDo) Clauses(conds ...clause.Expression) IHistoryDetailDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h historyDetailDo) Returning(value interface{}, columns ...string) IHistoryDetailDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h historyDetailDo) Not(conds ...gen.Condition) IHistoryDetailDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h historyDetailDo) Or(conds ...gen.Condition) IHistoryDetailDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h historyDetailDo) Select(conds ...field.Expr) IHistoryDetailDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h historyDetailDo) Where(conds ...gen.Condition) IHistoryDetailDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h historyDetailDo) Order(conds ...field.Expr) IHistoryDetailDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h historyDetailDo) Distinct(cols ...field.Expr) IHistoryDetailDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h historyDetailDo) Omit(cols ...field.Expr) IHistoryDetailDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h historyDetailDo) Join(table schema.Tabler, on ...field.Expr) IHistoryDetailDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h historyDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHistoryDetailDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h historyDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) IHistoryDetailDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h historyDetailDo) Group(cols ...field.Expr) IHistoryDetailDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h historyDetailDo) Having(conds ...gen.Condition) IHistoryDetailDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h historyDetailDo) Limit(limit int) IHistoryDetailDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h historyDetailDo) Offset(offset int) IHistoryDetailDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h historyDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHistoryDetailDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h historyDetailDo) Unscoped() IHistoryDetailDo {
	return h.withDO(h.DO.Unscoped())
}

func (h historyDetailDo) Create(values ...*model.HistoryDetail) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h historyDetailDo) CreateInBatches(values []*model.HistoryDetail, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h historyDetailDo) Save(values ...*model.HistoryDetail) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h historyDetailDo) First() (*model.HistoryDetail, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.HistoryDetail), nil
	}
}

func (h historyDetailDo) Take() (*model.HistoryDetail, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.HistoryDetail), nil
	}
}

func (h historyDetailDo) Last() (*model.HistoryDetail, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.HistoryDetail), nil
	}
}

func (h historyDetailDo) Find() ([]*model.HistoryDetail, error) {
	result, err := h.DO.Find()
	return result.([]*model.HistoryDetail), err
}

func (h historyDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.HistoryDetail, err error) {
	buf := make([]*model.HistoryDetail, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h historyDetailDo) FindInBatches(result *[]*model.HistoryDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h historyDetailDo) Attrs(attrs ...field.AssignExpr) IHistoryDetailDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h historyDetailDo) Assign(attrs ...field.AssignExpr) IHistoryDetailDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h historyDetailDo) Joins(fields ...field.RelationField) IHistoryDetailDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h historyDetailDo) Preload(fields ...field.RelationField) IHistoryDetailDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h historyDetailDo) FirstOrInit() (*model.HistoryDetail, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.HistoryDetail), nil
	}
}

func (h historyDetailDo) FirstOrCreate() (*model.HistoryDetail, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.HistoryDetail), nil
	}
}

func (h historyDetailDo) FindByPage(offset int, limit int) (result []*model.HistoryDetail, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h historyDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h historyDetailDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h historyDetailDo) Delete(models ...*model.HistoryDetail) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *historyDetailDo) withDO(do gen.Dao) *historyDetailDo {
	h.DO = *do.(*gen.DO)
	return h
}
